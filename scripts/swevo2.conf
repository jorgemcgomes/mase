### Used in the experiments in the paper ##############

# Repertoire generation

# Locomotion repertoires
-out exps/playground2/rep/loco -p jobs=10 -file build/classes/mase/app/playground/playground_locomotion.params

# Repertoires with the base setup
-out exps/playground2/rep/base -p jobs=30 -file build/classes/mase/app/playground/playground_nsneat.params

# No-Objects environment
-out exps/playground2/rep/noobj -p jobs=10 -file build/classes/mase/app/playground/playground_nsneat.params -p problem.minObjects=0 -p problem.maxObjects=0

# No-Obstacles environment
-out exps/playground2/rep/noobs -p jobs=10 -file build/classes/mase/app/playground/playground_nsneat.params -p problem.minObstacles=0 -p problem.maxObstacles=0

# Few environment
-out exps/playground2/rep/few -p jobs=10 -file build/classes/mase/app/playground/playground_nsneat.params -p problem.minObstacles=1 -p problem.maxObstacles=5 -p problem.minObjects=1 -p problem.maxObjects=5

# Fixed environment
-out exps/playground2/rep/fixed -p jobs=10 -file build/classes/mase/app/playground/playground_nsneat.params -p problem.minObstacles=5 -p problem.maxObstacles=5 -p problem.minObjects=5 -p problem.maxObjects=5

# None environment
-out exps/playground2/rep/none -p jobs=10 -file build/classes/mase/app/playground/playground_nsneat.params -p problem.minObstacles=0 -p problem.maxObstacles=0 -p problem.minObjects=0 -p problem.maxObjects=0

# Rand-MLP repertoire
#./run.sh mase.evorbc.RandomRepertoireGenerator -file ~/exps/playground2/rep/base/config.params -i 14 -h 10 -o 2 -size 1000 -jobs 10 -out ~/exps/playground2/rep/randmlp

# Rand-SLP repertoire
#./run.sh mase.evorbc.RandomRepertoireGenerator -file ~/exps/playground2/rep/base/config.params -i 14 -h 0 -o 2 -size 1000 -jobs 10 -out ~/exps/playground2/rep/randslp

# To compute the fitness of the primitives in the tasks, run the script swevo_repo_primitive_eval.sh

# Arbitrator evolution
# Note: the parameter evorbc.repertoire must point to something that exists
# either place the evolved repertoires in the mase.app.playground.rep package, and name them accordingly
# or modify the parameter value to point to the evolved repertoires

# Baseline tabula-rasa
-out exps/playground2/tasks/direct -p jobs=30 -file build/classes/mase/app/playground/{avoidance;tracking;exploration;foraging;obsforaging;maze;phototaxis;obsphototaxis;prey}.params -file build/classes/mase/neat/neat.params -p neat.RECURRENCY.ALLOWED=false

# EvoRBC-II with decision tree arbitrators, using the base repertoires
-out exps/playground2/tasks/gp -p jobs=10 -file build/classes/mase/app/playground/{avoidance;tracking;exploration;foraging;obsforaging;maze;phototaxis;obsphototaxis;prey}.params -file build/classes/mase/app/playground/playground_gp.params -p evorbc.repertoire=build/classes/mase/app/playground/rep/{base}_{0;1;2;3;4;5;6;7;8;9}.tar.gz

# EvoRBC-II with decision tree arbitrators, using the Random-MLP repertoires
-out exps/playground2/tasks/gp -p jobs=10 -file build/classes/mase/app/playground/{avoidance;tracking;exploration;foraging;obsforaging;maze;phototaxis;obsphototaxis;prey}.params -file build/classes/mase/app/playground/playground_gp.params -p evorbc.repertoire=build/classes/mase/app/playground/rep/{randmlp}_{0;1;2}.tar.gz

# EvoRBC-II with decision tree arbitrators, using the locomotion repertoire
-out exps/playground2/tasks/gp -p jobs=10 -file build/classes/mase/app/playground/{avoidance;tracking;exploration;foraging;obsforaging;maze;phototaxis;obsphototaxis;prey}.params -file build/classes/mase/app/playground/playground_gp.params -p evorbc.repertoire=build/classes/mase/app/playground/rep/{loco}_{0;1;2}.tar.gz

# Original EvoRBC with neural network arbitrators, using the locomotion repertoires and the higher-level repertoires
-out exps/playground2/tasks/evorbc -p jobs=10 -file build/classes/mase/app/playground/{avoidance;tracking;exploration;foraging;obsforaging;maze;phototaxis;obsphototaxis;prey}.params -file build/classes/mase/evorbc/neatevorbc.params -p evorbc.repertoire=build/classes/mase/app/playground/rep/{base;loco}_{0;1;2}.tar.gz -p evorbc.coordinates=direct -p evorbc.arbitrator-frequency=1 -p generations=1000

# To compute the decision-tree statistics of the best-of-run controllers
#./run.sh mase.evorbc.gp.BestTreeStatistics -recursive -f ~/exps/playground2/tasks

# To compute the primitive selection stats of the best-of-run controllers
# ./run.sh mase.mason.BatchExecutionReevaluation -r 1 -recursive -f ~/exps/playground2/tasks

### Extra experiments ##############

# Average state BC repo
-out exps/playground2/rep/as -p jobs=10 -file build/classes/mase/app/playground/playground_nsneat.params -p problem.eval.0=mase.mason.generic.AverageStateEvaluator -p problem.eval.0.windows=1 -p problem.eval.0.aggregation=geometricMedian

# Alternative SDBC with one less dimension (walls are considered as obstacles)
-out exps/playground2/rep/sdbc2 -p jobs=10 -file build/classes/mase/app/playground/playground_nsneat.params -p problem.eval.0=mase.app.playground.PlaygroundSDBC2 -p problem.eval.0.standardization=sdbcstandardization2.txt

# Alternative SDBC with standard deviations included in the BC
-out exps/playground2/rep/sdbc2sd -p jobs=10 -file build/classes/mase/app/playground/playground_nsneat.params -p problem.eval.0=mase.app.playground.PlaygroundSDBC2 -p problem.eval.0.standardization=sdbcstandardization2.txt -p problem.eval.0.sd=true

# Base setup but using novelty search with random criteria for adding and removing individuals from repo
-out exps/playground2/rep/randomcriteria -p jobs=10 -file build/classes/mase/app/playground/playground_nsneat.params -p novelty.archive-criteria=random -p novelty.removal-criteria=random

# Base environment but with different simulation lengths for the evaluation of the primitives
-out exps/playground2/rep/veryshort -p jobs=10 -file build/classes/mase/app/playground/playground_nsneat.params -p problem.max-steps=50
-out exps/playground2/rep/short -p jobs=10 -file build/classes/mase/app/playground/playground_nsneat.params -p problem.max-steps=100
-out exps/playground2/rep/long -p jobs=10 -file build/classes/mase/app/playground/playground_nsneat.params -p problem.max-steps=500
-out exps/playground2/rep/verylong -p jobs=10 -file build/classes/mase/app/playground/playground_nsneat.params -p problem.max-steps=1000

# Primitives with recursion allowed
-out exps/playground2/rep/recursive -p jobs=10 -file build/classes/mase/app/playground/playground_nsneat.params -p neat.RECURRENCY.ALLOWED=true


# Tabula rasa with recursion
-out exps/playground2/exploratory/directrec -p jobs=30 -file build/classes/mase/app/playground/{avoidance;tracking;exploration;foraging;obsforaging;maze;phototaxis;obsphototaxis;prey}.params -file build/classes/mase/neat/neat.params -p neat.RECURRENCY.ALLOWED=true

# EvoRBC-II with neural arbitrators, testing different frequencies for primitive selection
-out exps/playground2/exploratory/evorbc -p jobs=10 -file build/classes/mase/app/playground/{avoidance;dynphototaxis;exploration;freeforaging;maze;obsforaging;phototaxis;predator;simplephototaxis}.params -file build/classes/mase/evorbc/neatevorbc.params -p evorbc.repertoire=build/classes/mase/app/playground/rep/{base}_{0}.tar.gz -p evorbc.arbitrator-frequency={1;5;10;20}

# EvoRBC-II with decision tree arbitrators, trees initialized with larger sizes (from 1 to 50)
-out exps/playground2/exploratory/gplargeinit -p jobs=10 -file build/classes/mase/app/playground/{avoidance;tracking;exploration;foraging;obsforaging;maze;phototaxis;obsphototaxis;prey}.params -file build/classes/mase/app/playground/playground_gp.params -p evorbc.repertoire=build/classes/mase/app/playground/rep/{base}_{0;1;2}.tar.gz -p gp.build.ptc2.max-size=50

# EvoRBC-II with decision tree arbitrators, ratio bucket selection (bloat control) with ratio=4
-out exps/playground2/exploratory/gpratiobucket4 -p jobs=10 -file build/classes/mase/app/playground/{avoidance;tracking;exploration;foraging;obsforaging;maze;phototaxis;obsphototaxis;prey}.params -file build/classes/mase/app/playground/playground_gp.params -p evorbc.repertoire=build/classes/mase/app/playground/rep/{base}_{0;1;2}.tar.gz -p gp.koza.xover.source.0=ec.parsimony.RatioBucketTournamentSelection -p gp.koza.mutate.source.0=ec.parsimony.RatioBucketTournamentSelection -p gp.breed.mutate-erc.source.0=ec.parsimony.RatioBucketTournamentSelection -p select.ratio-bucket-tournament.size=5 -p select.ratio-bucket-tournament.ratio=4 -p select.ratio-bucket-tournament.pick-worst=false

# EvoRBC-II with decision tree arbitrators, ratio bucket selection (bloat control) with ratio=8 (less aggressive)
-out exps/playground2/exploratory/gpratiobucket4 -p jobs=10 -file build/classes/mase/app/playground/{avoidance;tracking;exploration;foraging;obsforaging;maze;phototaxis;obsphototaxis;prey}.params -file build/classes/mase/app/playground/playground_gp.params -p evorbc.repertoire=build/classes/mase/app/playground/rep/{base}_{0;1;2}.tar.gz -p gp.koza.xover.source.0=ec.parsimony.RatioBucketTournamentSelection -p gp.koza.mutate.source.0=ec.parsimony.RatioBucketTournamentSelection -p gp.breed.mutate-erc.source.0=ec.parsimony.RatioBucketTournamentSelection -p select.ratio-bucket-tournament.size=5 -p select.ratio-bucket-tournament.ratio=8 -p select.ratio-bucket-tournament.pick-worst=false

# Neural subset arbitrator
-out exps/playground2/exploratory/subset -p jobs=10 -file build/classes/mase/app/playground/{avoidance;tracking;exploration;foraging;obsforaging;maze;phototaxis;obsphototaxis;prey}.params -file build/classes/mase/evorbc/subsetevorbc.params -p evorbc.repertoire=build/classes/mase/app/playground/rep/{base}_{0}.tar.gz -p evorbc.num-primitives={5;10}

# EvoRBC-II with decision tree arbitrators, and explicit reward for switching primitives less often
-out exps/playground2/exploratory/gpsswitch -p jobs=10 -file build/classes/mase/app/playground/{avoidance;tracking;exploration;foraging;obsforaging;maze;phototaxis;obsphototaxis;prey}.params -file build/classes/mase/app/playground/playground_gp.params -p evorbc.repertoire=build/classes/mase/app/playground/rep/{base}_{0}.tar.gz -p problem.number-evals=2 -p problem.eval.1=mase.evorbc.SwitchesFitness -p problem.eval.1.frequency=1 -p eval.num-post=2 -p eval.post.1=mase.mo.LinearScalarization -p eval.post.1.scores=fitness,eval.1 -p eval.post.1.weights={0.9,0.1;0.75,0.25;0.5,0.5} -p eval.post.1.normalise=true

# EvoRBC-II with neural arbitrators, and explicit reward for switching primitives less often
-out exps/playground4/tasks/evorbcswitch -p jobs=10 -file build/classes/mase/app/playground/{avoidance;tracking;exploration;foraging;obsforaging;maze;phototaxis;obsphototaxis;prey}.params -file build/classes/mase/evorbc/neatevorbc.params -p evorbc.repertoire=build/classes/mase/app/playground/rep/{base}_{0}.tar.gz -p problem.number-evals=2 -p problem.eval.1=mase.evorbc.SwitchesFitness -p problem.eval.1.frequency=1 -p eval.num-post=1 -p eval.post.0=mase.mo.LinearScalarization -p eval.post.0.scores=fitness,eval.1 -p eval.post.0.weights={0.9,0.1;0.75,0.25;0.5,0.5} -p eval.post.0.normalise=true -p generations=1000
