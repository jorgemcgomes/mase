# Direct task-oriented evolution

-out exps/swarm/tasksfinal/agg -p jobs=20 -file build/classes/mase/app/swarm/swarm_tr.params -p problem.eval.0=mase.app.swarm.AggregationFitness -p problem.max-steps=750 -p problem.minObjects=0 -p problem.maxObjects=0 -p generations=500

-out exps/swarm/tasksfinal/cluster -p jobs=20 -file build/classes/mase/app/swarm/swarm_tr.params -p problem.eval.0=mase.app.swarm.ClusterFitness -p problem.eval.0.cluster-dist=15 -p problem.max-steps=750 -p problem.minObjects=0 -p problem.maxObjects=0 -p generations=500

-out exps/swarm/tasksfinal/dispersion -p jobs=20 -file build/classes/mase/app/swarm/swarm_tr.params -p problem.eval.0=mase.app.swarm.DispersionFitness -p problem.minObjects=0 -p problem.maxObjects=0 -p generations=500

-out exps/swarm/tasksfinal/coverage -p jobs=20 -file build/classes/mase/app/swarm/swarm_tr.params -p problem.eval.0=mase.app.swarm.CoverageFitness -p problem.eval.0.cell-size=20 -p problem.eval.0.decay-steps=1000 -p problem.minObjects=0 -p problem.maxObjects=0 -p problem.max-steps=1000 -p generations=500

-out exps/swarm/tasksfinal/bordercoverage -p jobs=20 -file build/classes/mase/app/swarm/swarm_tr.params -p problem.eval.0=mase.app.swarm.BorderCoverageFitness -p problem.eval.0.cell-size=20 -p problem.eval.0.decay-steps=1000 -p problem.eval.0.border-cells=1 -p problem.minObjects=0 -p problem.maxObjects=0 -p problem.max-steps=1000 -p generations=500

-out exps/swarm/tasksfinal/flocking -p jobs=20 -file build/classes/mase/app/swarm/swarm_tr.params -p problem.eval.0=mase.app.swarm.FlockingFitness -p problem.eval.0.flock-dist=25 -p problem.max-steps=750 -p problem.minObjects=0 -p problem.maxObjects=0 -p generations=500

-out exps/swarm/tasksfinal/phototaxis -p jobs=20 -file build/classes/mase/app/swarm/swarm_tr.params -p problem.eval.0=mase.app.swarm.PhototaxisFitness -p problem.minObjects=1 -p problem.maxObjects=1 -p problem.objectSpeed=0 -p generations=500

-out exps/swarm/tasksfinal/dynphototaxis -p jobs=20 -file build/classes/mase/app/swarm/swarm_tr.params -p problem.eval.0=mase.app.swarm.PhototaxisFitness -p problem.max-steps=1000 -p problem.minObjects=1 -p problem.maxObjects=1 -p problem.objectSpeed=0.75 -p generations=500

# Random repertoire
#./run.sh mase.evorbc.RandomRepertoireGenerator -file ~/exps/swarm/repfinal/qdfit/config.params -i 18 -h 20 -o 2 -size 1000 -jobs 20 -out ~/exps/swarm/repfinal/rand

# Evolved repertoire
-out exps/swarm/repfinal/qdfitlong25 -p jobs=10 -file build/classes/mase/app/swarm/swarm_nslcneat_col.params -p generations=1000 -p stat.child.22.epsilon=0.25

# Evolved repertoires not used in paper
-out exps/swarm/repfinal/qdfitlong -p jobs=10 -file build/classes/mase/app/swarm/swarm_nslcneat_col.params -p generations=1000 -p stat.child.22.epsilon=0.5
-out exps/swarm/repfinal/qdfit -p jobs=20 -file build/classes/mase/app/swarm/swarm_nslcneat_col.params -p generations=500 -p stat.child.22.epsilon=0.5

# Need to call script scripts/ants_reval_repos.sh after the repertoire evolution to post-evaluate the controllers in each of the tasks
# The task evolution needs to be done first, so that the re-evaluation uses the task config files of the task-oriented evolution

