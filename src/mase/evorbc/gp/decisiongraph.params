parent.0 = ../../base.params
parent.1 = ../evorbc.params

problem.controller-factory = mase.evorbc.gp.GPArbitratorFactory


# there is some bug with multithreading and mutation
breedthreads = 1

generations = 100

stat.child.22 = mase.evorbc.gp.ExtendedKozaStatistics
stat.child.22.do-depth = true
stat.child.22.do-size = true
stat.child.22.do-time = true
stat.child.22.do-subpops = false
stat.child.22.file = $koza.stat

stat.child.23 = mase.evorbc.gp.InitialPopulationDump
stat.child.23.file = $initial.stat


# Types
gp.type.a.size = 4
gp.type.a.0.name = bool
gp.type.a.1.name = sensor
gp.type.a.2.name = constant
gp.type.a.3.name = primitive
gp.type.s.size = 1
gp.type.s.0.name = sensor-or-constant
gp.type.s.0.size = 2
gp.type.s.0.member.0 = sensor
gp.type.s.0.member.1 = constant


# Tree Constraints
gp.tc.size = 1
gp.tc.0 = ec.gp.GPTreeConstraints
gp.tc.0.name = tc0
gp.tc.0.fset = f0
gp.tc.0.returns = primitive
gp.tc.0.init = ec.gp.build.PTC2

gp.build.ptc2.max-depth = 17
gp.build.ptc2.min-size = 1
gp.build.ptc2.max-size = 10

# Representation
init = ec.gp.GPInitializer

pop.subpops = 1
pop.subpop.0 = ec.Subpopulation
pop.default-subpop = 0
pop.subpop.0.size = 1000
breed.elite.0 = 0
pop.subpop.0.duplicate-retries = 100

pop.subpop.0.species = ec.gp.GPSpecies
pop.subpop.0.species.fitness = mase.evaluation.ExpandedFitness
pop.subpop.0.species.ind = ec.gp.GPIndividual
pop.subpop.0.species.ind.numtrees = 1
pop.subpop.0.species.ind.tree.0 = ec.gp.GPTree
pop.subpop.0.species.ind.tree.0.tc = tc0

# Pipeline
pop.subpop.0.species.pipe = ec.breed.MultiBreedingPipeline
pop.subpop.0.species.pipe.generate-max = false
pop.subpop.0.species.pipe.num-sources = 6
pop.subpop.0.species.pipe.source.0 = ec.gp.koza.CrossoverPipeline
pop.subpop.0.species.pipe.source.0.prob = 0.5
pop.subpop.0.species.pipe.source.1 = ec.gp.koza.MutationPipeline
pop.subpop.0.species.pipe.source.1.prob = 0.1
pop.subpop.0.species.pipe.source.2 = ec.gp.breed.MutatePromotePipeline
pop.subpop.0.species.pipe.source.2.prob = 0.1
pop.subpop.0.species.pipe.source.3 = ec.gp.breed.MutateERCPipeline
pop.subpop.0.species.pipe.source.3.prob = 0.1
pop.subpop.0.species.pipe.source.4 = ec.gp.breed.MutateOneNodePipeline
pop.subpop.0.species.pipe.source.4.prob = 0.1
pop.subpop.0.species.pipe.source.5 = ec.gp.breed.MutateAllNodesPipeline
pop.subpop.0.species.pipe.source.5.prob = 0.1


# Crossover
gp.koza.xover.source.0 = ec.parsimony.RatioBucketTournamentSelection
gp.koza.xover.source.1 = same
gp.koza.xover.ns.0 = ec.gp.koza.KozaNodeSelector
gp.koza.xover.ns.1 = same
gp.koza.xover.maxdepth = 17
gp.koza.xover.maxsize = 500
gp.koza.xover.tries = 10

# Mutation
gp.koza.mutate.source.0 = ec.parsimony.RatioBucketTournamentSelection
gp.koza.mutate.ns.0 = ec.gp.koza.KozaNodeSelector
gp.koza.mutate.maxdepth = 17
gp.koza.mutate.maxsize = 500
gp.koza.mutate.tree.0 = 0
gp.koza.mutate.build.0 = ec.gp.build.PTC2
gp.koza.mutate.tries = 10
gp.koza.mutate.equal = false

# Mutate one node
gp.breed.mutate-one-node.source.0 = ec.parsimony.RatioBucketTournamentSelection
gp.breed.mutate-one-node.ns.0 = ec.gp.koza.KozaNodeSelector
gp.breed.mutate-one-node.tree.0 = 0

# Mutate all nodes
gp.breed.mutate-all-nodes.source.0 = ec.parsimony.RatioBucketTournamentSelection
gp.breed.mutate-all-nodes.ns.0 = ec.gp.koza.KozaNodeSelector

# ERC Mutation
gp.breed.mutate-erc.source.0 = ec.parsimony.RatioBucketTournamentSelection
gp.breed.mutate-erc.ns.0 = ec.gp.koza.KozaNodeSelector

# Mutate promote
gp.breed.mutate-promote.source.0 = ec.parsimony.RatioBucketTournamentSelection
gp.breed.mutate-promote.tries = 10


select.ratio-bucket-tournament.size = 7
select.ratio-bucket-tournament.ratio = 2
select.ratio-bucket-tournament.pick-worst = false

# Node Selectors
gp.koza.ns.terminals = 0.5
gp.koza.ns.nonterminals = 0.5
gp.koza.ns.root = 0.0

# Basic Function Set Parameters
gp.fs.size = 1
gp.fs.0 = ec.gp.build.PTCFunctionSet
gp.fs.0.name = f0

# Node Constraints
gp.nc.size = 8

# and, or
gp.nc.0 = ec.gp.GPNodeConstraints
gp.nc.0.name = binarylogical
gp.nc.0.returns = bool
gp.nc.0.size = 2
gp.nc.0.child.0 = bool
gp.nc.0.child.1 = bool
gp.nc.0.prob = 0.2

# not
gp.nc.1 = ec.gp.GPNodeConstraints
gp.nc.1.name = unarylogical
gp.nc.1.returns = bool
gp.nc.1.size = 1
gp.nc.1.child.0 = bool
gp.nc.1.prob = 0.2

# sensor comparison
gp.nc.2 = ec.gp.GPNodeConstraints
gp.nc.2.name = comparator
gp.nc.2.returns = bool
gp.nc.2.size = 2
gp.nc.2.child.0 = sensor
gp.nc.2.child.1 = sensor-or-constant
gp.nc.2.prob = 0.6 

# sensorvalue terminal (x10), sensorvalue erc
gp.nc.3 = ec.gp.GPNodeConstraints
gp.nc.3.name = sensorterminal
gp.nc.3.returns = sensor
gp.nc.3.size = 0
gp.nc.3.prob = 0.05

# sensor arithmetic
gp.nc.4 = ec.gp.GPNodeConstraints
gp.nc.4.name = sensormath
gp.nc.4.returns = sensor
gp.nc.4.size = 2
gp.nc.4.child.0 = sensor
gp.nc.4.child.1 = sensor
gp.nc.4.prob = 0.1

# constant terminal
gp.nc.5 = ec.gp.GPNodeConstraints
gp.nc.5.name = constantterminal
gp.nc.5.returns = constant
gp.nc.5.size = 0
gp.nc.5.prob = 0.5

# primitive terminal
gp.nc.6 = ec.gp.GPNodeConstraints
gp.nc.6.name = primitiveterminal
gp.nc.6.returns = primitive
gp.nc.6.size = 0
gp.nc.6.prob = 0.75

# ifelse
gp.nc.7 = ec.gp.GPNodeConstraints
gp.nc.7.name = conditional
gp.nc.7.returns = primitive
gp.nc.7.size = 3
gp.nc.7.child.0 = bool
gp.nc.7.child.1 = primitive
gp.nc.7.child.2 = primitive
gp.nc.7.prob = 0.25


# Our Function Set
gp.fs.0.size = 7
gp.fs.0.func.0 = mase.evorbc.gp.And
gp.fs.0.func.0.nc = binarylogical
gp.fs.0.func.1 = mase.evorbc.gp.Or
gp.fs.0.func.1.nc = binarylogical
gp.fs.0.func.2 = mase.evorbc.gp.Not
gp.fs.0.func.2.nc = unarylogical

gp.fs.0.func.3 = mase.evorbc.gp.Lower
gp.fs.0.func.3.nc = comparator

gp.fs.0.func.4 = mase.evorbc.gp.RepoPrimitive
gp.fs.0.func.4.nc = primitiveterminal
gp.fs.0.func.4.mutation-sd = 0.2

gp.fs.0.func.5 = mase.evorbc.gp.SensorConstant
gp.fs.0.func.5.nc = constantterminal
gp.fs.0.func.5.mutation-sd = 0.2

gp.fs.0.func.6 = mase.evorbc.gp.IfElse
gp.fs.0.func.6.nc = conditional

# sensor terminals must be added. Ex:
# gp.fs.0.func.7 = mase.evorbc.gp.SensorValue
# gp.fs.0.func.7.nc = sensorterminal
# gp.fs.0.func.7.sensor-index = 0
# gp.fs.0.func.7.sensor-name = LW

