/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mase.mason;

import java.util.Arrays;
import java.util.List;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import mase.stat.PersistentSolution;
import org.apache.commons.lang3.ArrayUtils;

/**
 *
 * @author jorge
 */
public class SolutionsList extends javax.swing.JFrame {

    /**
     * Creates new form SolutionsList
     */
    public SolutionsList() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tableScroll = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        launchButton = new javax.swing.JButton();
        textScroll = new javax.swing.JScrollPane();
        text = new javax.swing.JTextArea();
        status = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        table.setAutoCreateRowSorter(true);
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Generation", "Subpop", "Index", "Fitness"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tableScroll.setViewportView(table);

        launchButton.setText("Select controller");
        launchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                launchButtonActionPerformed(evt);
            }
        });

        text.setColumns(20);
        text.setRows(5);
        textScroll.setViewportView(text);

        status.setText("NO CONTROLLER LOADED");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(status, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(launchButton))
                    .addComponent(tableScroll, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 750, Short.MAX_VALUE)
                    .addComponent(textScroll, javax.swing.GroupLayout.Alignment.LEADING))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tableScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(launchButton)
                    .addComponent(status)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void launchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_launchButtonActionPerformed
        int r = table.getSelectedRow();
        if (r != -1) {
            r = table.convertRowIndexToModel(r);
            PersistentSolution sol = solutions.get(r);
            status.setText(sol.getGeneration() + " / " + sol.getSubpop() + " / " + sol.getIndex());
            if (handler == null) {
                System.err.println("No SolutionSelectionHandler specified!");
            } else {
                handler.solutionSelected(sol);
            }
        }
    }//GEN-LAST:event_launchButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SolutionsList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SolutionsList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SolutionsList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SolutionsList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SolutionsList().setVisible(true);
            }
        });
    }

    public static interface SolutionSelectionHandler {

        public void solutionSelected(PersistentSolution sol);

    }

    private List<PersistentSolution> solutions;
    private SolutionSelectionHandler handler;

    public void populateTable(final List<PersistentSolution> solutions) {
        this.solutions = solutions;
        DefaultTableModel mod = (DefaultTableModel) table.getModel();
        
        // create columns and headers
        PersistentSolution sample = solutions.get(0);
        if(sample.getUserData() instanceof double[]) {
            double[] d = (double[]) sample.getUserData();
            for(int i = 0 ; i < d.length ; i++) {
                mod.addColumn("B"+i);
            }
        } else if(sample.getUserData() != null) {
            mod.addColumn("UserData");
        }
        
        // populate table
        for (PersistentSolution s : solutions) {
            Object[] ids = new Object[]{s.getGeneration(), s.getSubpop(), s.getIndex(), s.getFitness()};
            Object ud = s.getUserData();
            if(ud instanceof double[]) {
                mod.addRow(ArrayUtils.addAll(ids, (Object[]) ArrayUtils.toObject((double[]) ud)));
            } else if(ud != null) {
                mod.addRow(ArrayUtils.add(ids, ud.toString()));
            } else {
                mod.addRow(ids);
            }            
        }

        // Update text pane on row selection
        table.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                int r = table.getSelectedRow();
                if (r != -1) {
                    r = table.convertRowIndexToModel(r);
                    PersistentSolution sol = solutions.get(r);
                    text.setText(sol.toString());
                } else {
                    text.setText("");
                }
            }
        });
    }

    public void setHandler(SolutionSelectionHandler handler) {
        this.handler = handler;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton launchButton;
    public javax.swing.JLabel status;
    public javax.swing.JTable table;
    public javax.swing.JScrollPane tableScroll;
    public javax.swing.JTextArea text;
    public javax.swing.JScrollPane textScroll;
    // End of variables declaration//GEN-END:variables
}
