***************
*** 54,60 ****
   * <p><b>Changes since V18:</b> Removed old final declarations, which used to
   * potentially speed up the code, but no longer.
   *
-  * <p><b>Changes since V17:</b> Removed vestigial references to &= 0xffffffff
   * which stemmed from the original C code.  The C code could not guarantee that
   * ints were 32 bit, hence the masks.  The vestigial references in the Java
   * code were likely optimized out anyway.
--- 54,60 ----
   * <p><b>Changes since V18:</b> Removed old final declarations, which used to
   * potentially speed up the code, but no longer.
   *
+  * <p><b>Changes since V17:</b> Removed vestigial references to &amp;= 0xffffffff
   * which stemmed from the original C code.  The C code could not guarantee that
   * ints were 32 bit, hence the masks.  The vestigial references in the Java
   * code were likely optimized out anyway.
***************
*** 111,117 ****
   * milliseconds.
   *
   * <p><b>Changes Since V4:</b> New initialization algorithms.  See
-  * (see <a href="http://www.math.keio.ac.jp/matumoto/MT2002/emt19937ar.html"</a>
   * http://www.math.keio.ac.jp/matumoto/MT2002/emt19937ar.html</a>)
   *
   * <p>The MersenneTwister code is based on standard MT19937 C/C++ 
--- 111,117 ----
   * milliseconds.
   *
   * <p><b>Changes Since V4:</b> New initialization algorithms.  See
+  * (see <a href="http://www.math.keio.ac.jp/matumoto/MT2002/emt19937ar.html">
   * http://www.math.keio.ac.jp/matumoto/MT2002/emt19937ar.html</a>)
   *
   * <p>The MersenneTwister code is based on standard MT19937 C/C++ 
***************
*** 476,482 ****
  
      /** This method is for completness' sake. 
          Returns a long drawn uniformly from 0 to n-1.  Suffice it to say,
-         n must be > 0, or an IllegalArgumentException is raised. */
      
      public long nextLong(long n) 
          {
--- 476,482 ----
  
      /** This method is for completness' sake. 
          Returns a long drawn uniformly from 0 to n-1.  Suffice it to say,
+         n must be &gt; 0, or an IllegalArgumentException is raised. */
      
      public long nextLong(long n) 
          {
***************
*** 504,515 ****
  
      /** Returns a double in the range from 0.0 to 1.0, possibly inclusive of 0.0 and 1.0 themselves.  Thus:
  
-         <p><table border=0>
-         <th><td>Expression<td>Interval
-         <tr><td>nextDouble(false, false)<td>(0.0, 1.0)
-         <tr><td>nextDouble(true, false)<td>[0.0, 1.0)
-         <tr><td>nextDouble(false, true)<td>(0.0, 1.0]
-         <tr><td>nextDouble(true, true)<td>[0.0, 1.0]
          </table>
          
          <p>This version preserves all possible random values in the double range.
--- 504,516 ----
  
      /** Returns a double in the range from 0.0 to 1.0, possibly inclusive of 0.0 and 1.0 themselves.  Thus:
  
+         <table border=0>
+         <tr><th>Expression</th><th>Interval</th></tr>
+         <tr><td>nextDouble(false, false)</td><td>(0.0, 1.0)</td></tr>
+         <tr><td>nextDouble(true, false)</td><td>[0.0, 1.0)</td></tr>
+         <tr><td>nextDouble(false, true)</td><td>(0.0, 1.0]</td></tr>
+         <tr><td>nextDouble(true, true)</td><td>[0.0, 1.0]</td></tr>
+         <caption>Table of intervals</caption>
          </table>
          
          <p>This version preserves all possible random values in the double range.
***************
*** 539,550 ****
  
      /** Returns a float in the range from 0.0f to 1.0f, possibly inclusive of 0.0f and 1.0f themselves.  Thus:
  
-         <p><table border=0>
-         <th><td>Expression<td>Interval
-         <tr><td>nextFloat(false, false)<td>(0.0f, 1.0f)
-         <tr><td>nextFloat(true, false)<td>[0.0f, 1.0f)
-         <tr><td>nextFloat(false, true)<td>(0.0f, 1.0f]
-         <tr><td>nextFloat(true, true)<td>[0.0f, 1.0f]
          </table>
          
          <p>This version preserves all possible random values in the float range.
--- 540,552 ----
  
      /** Returns a float in the range from 0.0f to 1.0f, possibly inclusive of 0.0f and 1.0f themselves.  Thus:
  
+         <table border=0>
+         <tr><th>Expression</th><th>Interval</th></tr>
+         <tr><td>nextFloat(false, false)</td><td>(0.0f, 1.0f)</td></tr>
+         <tr><td>nextFloat(true, false)</td><td>[0.0f, 1.0f)</td></tr>
+         <tr><td>nextFloat(false, true)</td><td>(0.0f, 1.0f]</td></tr>
+         <tr><td>nextFloat(true, true)</td><td>[0.0f, 1.0f]</td></tr>
+         <caption>Table of intervals</caption>
          </table>
          
          <p>This version preserves all possible random values in the float range.
